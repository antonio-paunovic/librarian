// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"librarian/client/books"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBooksGetBooksIsbnCmd returns a cmd to handle operation getBooksIsbn
func makeOperationBooksGetBooksIsbnCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetBooksIsbn",
		Short: ``,
		RunE:  runOperationBooksGetBooksIsbn,
	}

	if err := registerOperationBooksGetBooksIsbnParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBooksGetBooksIsbn uses cmd flags to call endpoint api
func runOperationBooksGetBooksIsbn(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := books.NewGetBooksIsbnParams()
	if err, _ := retrieveOperationBooksGetBooksIsbnIsbnFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBooksGetBooksIsbnResult(appCli.Books.GetBooksIsbn(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBooksGetBooksIsbnParamFlags registers all flags needed to fill params
func registerOperationBooksGetBooksIsbnParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBooksGetBooksIsbnIsbnParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBooksGetBooksIsbnIsbnParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	isbnDescription := `Required. isbn code`

	var isbnFlagName string
	if cmdPrefix == "" {
		isbnFlagName = "isbn"
	} else {
		isbnFlagName = fmt.Sprintf("%v.isbn", cmdPrefix)
	}

	var isbnFlagDefault string

	_ = cmd.PersistentFlags().String(isbnFlagName, isbnFlagDefault, isbnDescription)

	return nil
}

func retrieveOperationBooksGetBooksIsbnIsbnFlag(m *books.GetBooksIsbnParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("isbn") {

		var isbnFlagName string
		if cmdPrefix == "" {
			isbnFlagName = "isbn"
		} else {
			isbnFlagName = fmt.Sprintf("%v.isbn", cmdPrefix)
		}

		isbnFlagValue, err := cmd.Flags().GetString(isbnFlagName)
		if err != nil {
			return err, false
		}
		m.Isbn = isbnFlagValue

	}
	return nil, retAdded
}

// parseOperationBooksGetBooksIsbnResult parses request result and return the string content
func parseOperationBooksGetBooksIsbnResult(resp0 *books.GetBooksIsbnOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*books.GetBooksIsbnDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*books.GetBooksIsbnOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*books.GetBooksIsbnNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
