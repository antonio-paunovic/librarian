// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"librarian/models"

	"github.com/spf13/cobra"
)

// Schema cli for Book

// register flags to command
func registerModelBookFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBookAuthor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBookGenre(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBookIsbn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBookPublished(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBookTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBookAuthor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authorDescription := ``

	var authorFlagName string
	if cmdPrefix == "" {
		authorFlagName = "author"
	} else {
		authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
	}

	var authorFlagDefault string

	_ = cmd.PersistentFlags().String(authorFlagName, authorFlagDefault, authorDescription)

	return nil
}

func registerBookGenre(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	genreDescription := ``

	var genreFlagName string
	if cmdPrefix == "" {
		genreFlagName = "genre"
	} else {
		genreFlagName = fmt.Sprintf("%v.genre", cmdPrefix)
	}

	var genreFlagDefault string

	_ = cmd.PersistentFlags().String(genreFlagName, genreFlagDefault, genreDescription)

	return nil
}

func registerBookIsbn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isbnDescription := `Required. `

	var isbnFlagName string
	if cmdPrefix == "" {
		isbnFlagName = "isbn"
	} else {
		isbnFlagName = fmt.Sprintf("%v.isbn", cmdPrefix)
	}

	var isbnFlagDefault string

	_ = cmd.PersistentFlags().String(isbnFlagName, isbnFlagDefault, isbnDescription)

	return nil
}

func registerBookPublished(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive published strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerBookTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := ``

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBookFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authorAdded := retrieveBookAuthorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorAdded

	err, genreAdded := retrieveBookGenreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || genreAdded

	err, isbnAdded := retrieveBookIsbnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isbnAdded

	err, publishedAdded := retrieveBookPublishedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishedAdded

	err, titleAdded := retrieveBookTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	return nil, retAdded
}

func retrieveBookAuthorFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorFlagName := fmt.Sprintf("%v.author", cmdPrefix)
	if cmd.Flags().Changed(authorFlagName) {

		var authorFlagName string
		if cmdPrefix == "" {
			authorFlagName = "author"
		} else {
			authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
		}

		authorFlagValue, err := cmd.Flags().GetString(authorFlagName)
		if err != nil {
			return err, false
		}
		m.Author = authorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBookGenreFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	genreFlagName := fmt.Sprintf("%v.genre", cmdPrefix)
	if cmd.Flags().Changed(genreFlagName) {

		var genreFlagName string
		if cmdPrefix == "" {
			genreFlagName = "genre"
		} else {
			genreFlagName = fmt.Sprintf("%v.genre", cmdPrefix)
		}

		genreFlagValue, err := cmd.Flags().GetString(genreFlagName)
		if err != nil {
			return err, false
		}
		m.Genre = genreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBookIsbnFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isbnFlagName := fmt.Sprintf("%v.isbn", cmdPrefix)
	if cmd.Flags().Changed(isbnFlagName) {

		var isbnFlagName string
		if cmdPrefix == "" {
			isbnFlagName = "isbn"
		} else {
			isbnFlagName = fmt.Sprintf("%v.isbn", cmdPrefix)
		}

		isbnFlagValue, err := cmd.Flags().GetString(isbnFlagName)
		if err != nil {
			return err, false
		}
		m.Isbn = &isbnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBookPublishedFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publishedFlagName := fmt.Sprintf("%v.published", cmdPrefix)
	if cmd.Flags().Changed(publishedFlagName) {

		// warning: primitive published strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBookTitleFlags(depth int, m *models.Book, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
