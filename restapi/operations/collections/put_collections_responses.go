// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"librarian/models"
)

// PutCollectionsOKCode is the HTTP code returned for type PutCollectionsOK
const PutCollectionsOKCode int = 200

/*
PutCollectionsOK Collection by given name.

swagger:response putCollectionsOK
*/
type PutCollectionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Collection `json:"body,omitempty"`
}

// NewPutCollectionsOK creates PutCollectionsOK with default headers values
func NewPutCollectionsOK() *PutCollectionsOK {

	return &PutCollectionsOK{}
}

// WithPayload adds the payload to the put collections o k response
func (o *PutCollectionsOK) WithPayload(payload *models.Collection) *PutCollectionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put collections o k response
func (o *PutCollectionsOK) SetPayload(payload *models.Collection) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCollectionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCollectionsNotFoundCode is the HTTP code returned for type PutCollectionsNotFound
const PutCollectionsNotFoundCode int = 404

/*
PutCollectionsNotFound Collection not found.

swagger:response putCollectionsNotFound
*/
type PutCollectionsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutCollectionsNotFound creates PutCollectionsNotFound with default headers values
func NewPutCollectionsNotFound() *PutCollectionsNotFound {

	return &PutCollectionsNotFound{}
}

// WithPayload adds the payload to the put collections not found response
func (o *PutCollectionsNotFound) WithPayload(payload *models.Error) *PutCollectionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put collections not found response
func (o *PutCollectionsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCollectionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PutCollectionsDefault bad input parameter/missing collection

swagger:response putCollectionsDefault
*/
type PutCollectionsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutCollectionsDefault creates PutCollectionsDefault with default headers values
func NewPutCollectionsDefault(code int) *PutCollectionsDefault {
	if code <= 0 {
		code = 500
	}

	return &PutCollectionsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put collections default response
func (o *PutCollectionsDefault) WithStatusCode(code int) *PutCollectionsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put collections default response
func (o *PutCollectionsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put collections default response
func (o *PutCollectionsDefault) WithPayload(payload *models.Error) *PutCollectionsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put collections default response
func (o *PutCollectionsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCollectionsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
