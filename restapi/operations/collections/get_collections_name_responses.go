// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"librarian/models"
)

// GetCollectionsNameOKCode is the HTTP code returned for type GetCollectionsNameOK
const GetCollectionsNameOKCode int = 200

/*
GetCollectionsNameOK Collection matching the requested name

swagger:response getCollectionsNameOK
*/
type GetCollectionsNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.Collection `json:"body,omitempty"`
}

// NewGetCollectionsNameOK creates GetCollectionsNameOK with default headers values
func NewGetCollectionsNameOK() *GetCollectionsNameOK {

	return &GetCollectionsNameOK{}
}

// WithPayload adds the payload to the get collections name o k response
func (o *GetCollectionsNameOK) WithPayload(payload *models.Collection) *GetCollectionsNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get collections name o k response
func (o *GetCollectionsNameOK) SetPayload(payload *models.Collection) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCollectionsNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCollectionsNameNotFoundCode is the HTTP code returned for type GetCollectionsNameNotFound
const GetCollectionsNameNotFoundCode int = 404

/*
GetCollectionsNameNotFound Collection not found.

swagger:response getCollectionsNameNotFound
*/
type GetCollectionsNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCollectionsNameNotFound creates GetCollectionsNameNotFound with default headers values
func NewGetCollectionsNameNotFound() *GetCollectionsNameNotFound {

	return &GetCollectionsNameNotFound{}
}

// WithPayload adds the payload to the get collections name not found response
func (o *GetCollectionsNameNotFound) WithPayload(payload *models.Error) *GetCollectionsNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get collections name not found response
func (o *GetCollectionsNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCollectionsNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetCollectionsNameDefault bad input parametr/missing collection

swagger:response getCollectionsNameDefault
*/
type GetCollectionsNameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCollectionsNameDefault creates GetCollectionsNameDefault with default headers values
func NewGetCollectionsNameDefault(code int) *GetCollectionsNameDefault {
	if code <= 0 {
		code = 500
	}

	return &GetCollectionsNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get collections name default response
func (o *GetCollectionsNameDefault) WithStatusCode(code int) *GetCollectionsNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get collections name default response
func (o *GetCollectionsNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get collections name default response
func (o *GetCollectionsNameDefault) WithPayload(payload *models.Error) *GetCollectionsNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get collections name default response
func (o *GetCollectionsNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCollectionsNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
