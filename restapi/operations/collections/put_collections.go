// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutCollectionsHandlerFunc turns a function with the right signature into a put collections handler
type PutCollectionsHandlerFunc func(PutCollectionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCollectionsHandlerFunc) Handle(params PutCollectionsParams) middleware.Responder {
	return fn(params)
}

// PutCollectionsHandler interface for that can handle valid put collections params
type PutCollectionsHandler interface {
	Handle(PutCollectionsParams) middleware.Responder
}

// NewPutCollections creates a new http.Handler for the put collections operation
func NewPutCollections(ctx *middleware.Context, handler PutCollectionsHandler) *PutCollections {
	return &PutCollections{Context: ctx, Handler: handler}
}

/*
	PutCollections swagger:route PUT /collections collections putCollections

Update collection
*/
type PutCollections struct {
	Context *middleware.Context
	Handler PutCollectionsHandler
}

func (o *PutCollections) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutCollectionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
