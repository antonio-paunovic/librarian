// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCollectionsHandlerFunc turns a function with the right signature into a get collections handler
type GetCollectionsHandlerFunc func(GetCollectionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCollectionsHandlerFunc) Handle(params GetCollectionsParams) middleware.Responder {
	return fn(params)
}

// GetCollectionsHandler interface for that can handle valid get collections params
type GetCollectionsHandler interface {
	Handle(GetCollectionsParams) middleware.Responder
}

// NewGetCollections creates a new http.Handler for the get collections operation
func NewGetCollections(ctx *middleware.Context, handler GetCollectionsHandler) *GetCollections {
	return &GetCollections{Context: ctx, Handler: handler}
}

/*
	GetCollections swagger:route GET /collections collections getCollections

Get one or all collections
*/
type GetCollections struct {
	Context *middleware.Context
	Handler GetCollectionsHandler
}

func (o *GetCollections) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCollectionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
