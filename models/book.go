// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Book book
//
// swagger:model book
type Book struct {

	// author
	// Example: Michael Kerrisk
	Author string `json:"author,omitempty"`

	// genre
	// Example: Programming manual
	Genre string `json:"genre,omitempty"`

	// isbn
	// Example: 1593272200
	// Required: true
	Isbn *string `json:"isbn"`

	// published
	// Example: 2023-04-24
	// Format: date
	Published strfmt.Date `json:"published,omitempty"`

	// title
	// Example: The Linux Programming Interface: A Linux and UNIX System Programming Handbook
	Title string `json:"title,omitempty"`
}

// Validate validates this book
func (m *Book) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsbn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublished(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Book) validateIsbn(formats strfmt.Registry) error {

	if err := validate.Required("isbn", "body", m.Isbn); err != nil {
		return err
	}

	return nil
}

func (m *Book) validatePublished(formats strfmt.Registry) error {
	if swag.IsZero(m.Published) { // not required
		return nil
	}

	if err := validate.FormatOf("published", "body", "date", m.Published.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this book based on context it is used
func (m *Book) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Book) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Book) UnmarshalBinary(b []byte) error {
	var res Book
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
